#!/bin/bash

#getting the username and shell from the user, and optionally any groups, using getopts
while getopts "u:s:g:" opt; do
	case $opt in
		u)
			name="${OPTARG}" # name stores the username 
			;;
		s)
			shell="${OPTARG}" # shell stores the shell provided by the user
			;;
		g)
			groups="${OPTARG}" # groups store the groups provided by the user
			;;
		\?)
			echo "Invalid option: -${OPTARG}" # if the user inputs anything other than -u, -s or -g, returns an error
			exit 1
			;;
		:)
			echo "Option -${OPTARG} requires an argument." # if the user does not provide any option, returns an error
			exit 1
            		;;
	esac
done

# checking if the required values (username and shell) are provoded. If not, returns error.
if [ -z "$name" ] || [ -z "$shell" ]; then
	echo "Error: Must provide username and shell."
    	exit 1
fi

# checks and returns error if username provided already exists in /etc/passwd
if grep -q "^$name:" /etc/passwd; then
	echo "Error: User '$name' already exists."
	exit 1
fi

# setting  default home directory for the user
home_dir="/home/$name"

# processing /etc/passwd using awk and incrementing the highest uid to get a unique uid for the new user
user_uid=$(awk -F: '{ if ($3 >= max_uid) max_uid=$3 } END { print max_uid + 1 }' /etc/passwd)
user_gid=$user_uid  # same gid as uid


# creating new user in /etc/passwd
echo "$name:x:$user_uid:$user_gid:$name:$home_dir:$shell" >> /etc/passwd
echo "New user '$name' created."

# creating primary group for user in /etc/group
echo "$name:x:$user_gid:" >> /etc/group
echo "Created primary group."

# adding new groups if included by the user
if [ -n "$groups" ]; then
	IFS=',' read -ra new_group <<< "$groups" # splits group names by ,
    	for grp in "${new_group[@]}"; do
        	# creates new group if specified group does not exist
        	if ! grep -q "^$grp:" /etc/group; then
			user_gid=$((user_gid + 1))
			echo "$grp:x:$user_gid:" >> /etc/group
        	fi
		sed -i "/^$grp:/ s/$/,$name/" /etc/group # adds the user to the group
	done
fi

# creating home directory if it does not exist
mkdir -p "$home_dir"
cp -r /etc/skel/. "$home_dir" # copying user's config files to the user's home directory
chown -R "$name:$name" "$home_dir"
echo "Home directory for '$name' created."

# giving the new user a password
echo "Please enter a password for $name: "
passwd "$name"

echo "User creation complete."

